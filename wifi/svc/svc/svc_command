SVC frame format for daemon

- sessionID : 4 byte (00 00 00 00 for SVC_CMD_CONNECT_STEP*)
- 1 byte info
    data/command: 7th bit
	encrypted: 3th bit
	using tcp: 2th bit	 //used by htp layer
	priority: 1&0 th bit //used by htp layer

- data packet structure
	[encrypted]
	+ data length: 4 byte	
	+ data payload
	+ HMAC (if encrypted)
	
- command packet structure
	[encrypted]
	+ command id: 1 byte
		째 SVC_CMD_CHECK_ALIVE: check if the socket is still listened by app
			- daemon to client: 0 argument	
			
		째 SVC_CMD_REGISTER_APP: resgister app to daemon
			- client to daemon: 2 argument: [(4 byte - appID), (4 byte - session secret)]
			- daemon to client: 2 argument: [(n byte - sessionID), (4 byte - the same session secret)]
			
		째 SVC_CMD_CONNECT_STEP1:
			- client to daemon: 3 argument: [(1 byte - isClient = 0), (4 byte - address), (n bytes - challenge)]
			- server to daemon: 1 argument: [(1 byte - isServer = 1)]
			- daemon to daemon: 4 argument: [(1 byte - isClient = 0 at 0th bit, version at 7th and 6th bits), (4 byte - address), (n bytes - challenge), (4 bytes - appID)]		
			- daemon to server: 1 argument: [(n bytes - challenge)]
			
		째 SVC_CMD_CONNECT_STEP2:
			
		
	+ number of arguments: 1 byte
	+ [arguments' lengths in 2 bytes followed by arguments]
	
	+ HMAC (if encrypted)
	
- session exchange at and after connection:
	+ SVC_CMD_CONNECT_STEP1, set sessionID = 0 and send appID
	+ at receiving, find appID and temporarily use the sessionID of the receiver
	+ repeat until SVC_CMD_CONNECT_STEP3, when we have the common secret
	+ derive new sessionID from the common secret
	+ the two daemons use this sessionID to identify futher communication.
	
	
